import os
import subprocess
import logging
import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError
import shutil
from datetime import datetime

# Configure logging
logging.basicConfig(
    filename='backup_report.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Function to perform a remote backup using rsync
def backup_to_remote(local_dir, remote_server, remote_dir):
    try:
        # Command for rsync backup
        rsync_command = f"rsync -avz {local_dir} {remote_server}:{remote_dir}"
        subprocess.run(rsync_command, shell=True, check=True)
        logging.info(f"Backup to {remote_server} successful.")
        print(f"Backup to {remote_server} successful.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error during remote backup: {e}")
        print(f"Error during remote backup: {e}")
        
# Function to backup to AWS S3
def backup_to_s3(local_dir, bucket_name, s3_prefix):
    try:
        # Initialize S3 client
        s3 = boto3.client('s3')
        
        # Get the current timestamp to use as a unique backup folder
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        backup_key = f"{s3_prefix}/{timestamp}/"

        # Walk through the local directory and upload files to S3
        for root, dirs, files in os.walk(local_dir):
            for file in files:
                local_file = os.path.join(root, file)
                s3_file = os.path.join(backup_key, os.path.relpath(local_file, local_dir))

                # Upload the file to S3
                s3.upload_file(local_file, bucket_name, s3_file)
                logging.info(f"Uploaded {local_file} to S3 bucket {bucket_name} as {s3_file}")
        
        logging.info(f"Backup to S3 bucket {bucket_name} successful.")
        print(f"Backup to S3 bucket {bucket_name} successful.")
    except (NoCredentialsError, PartialCredentialsError) as e:
        logging.error(f"Missing or incorrect AWS credentials: {e}")
        print(f"Error with AWS credentials: {e}")
    except Exception as e:
        logging.error(f"Error during S3 backup: {e}")
        print(f"Error during S3 backup: {e}")

# Function to backup to a local directory (for testing purposes)
def backup_to_local(local_dir, backup_dir):
    try:
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        # Copy the contents of the local directory to the backup location
        backup_location = os.path.join(backup_dir, datetime.now().strftime("%Y-%m-%d_%H-%M-%S"))
        shutil.copytree(local_dir, backup_location)
        logging.info(f"Backup to local directory {backup_location} successful.")
        print(f"Backup to local directory {backup_location} successful.")
    except Exception as e:
        logging.error(f"Error during local backup: {e}")
        print(f"Error during local backup: {e}")

# Main function
def main():
    local_directory = '/path/to/local/directory'  # Specify the directory to backup
    remote_server = 'user@remote.server.com'  # Remote server details
    remote_directory = '/path/to/remote/backup'
    s3_bucket_name = 'my-backup-bucket'
    s3_prefix = 'backups'

    # Backup choice
    backup_choice = input("Choose backup method (1 = Remote, 2 = Cloud): ")

    if backup_choice == '1':
        # Perform remote backup
        backup_to_remote(local_directory, remote_server, remote_directory)
    elif backup_choice == '2':
        # Perform cloud backup (AWS S3)
        backup_to_s3(local_directory, s3_bucket_name, s3_prefix)
    else:
        print("Invalid choice. Please choose either 1 (Remote) or 2 (Cloud).")

if _name_ == "_main_":
    main()